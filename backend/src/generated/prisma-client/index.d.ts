// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  bus: (where?: BusWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  route: (where?: RouteWhereInput) => Promise<boolean>;
  stop: (where?: StopWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bus: (where: BusWhereUniqueInput) => BusNullablePromise;
  buses: (args?: {
    where?: BusWhereInput;
    orderBy?: BusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bus>;
  busesConnection: (args?: {
    where?: BusWhereInput;
    orderBy?: BusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BusConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  route: (where: RouteWhereUniqueInput) => RouteNullablePromise;
  routes: (args?: {
    where?: RouteWhereInput;
    orderBy?: RouteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Route>;
  routesConnection: (args?: {
    where?: RouteWhereInput;
    orderBy?: RouteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RouteConnectionPromise;
  stop: (where: StopWhereUniqueInput) => StopNullablePromise;
  stops: (args?: {
    where?: StopWhereInput;
    orderBy?: StopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Stop>;
  stopsConnection: (args?: {
    where?: StopWhereInput;
    orderBy?: StopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StopConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBus: (data: BusCreateInput) => BusPromise;
  updateBus: (args: {
    data: BusUpdateInput;
    where: BusWhereUniqueInput;
  }) => BusPromise;
  updateManyBuses: (args: {
    data: BusUpdateManyMutationInput;
    where?: BusWhereInput;
  }) => BatchPayloadPromise;
  upsertBus: (args: {
    where: BusWhereUniqueInput;
    create: BusCreateInput;
    update: BusUpdateInput;
  }) => BusPromise;
  deleteBus: (where: BusWhereUniqueInput) => BusPromise;
  deleteManyBuses: (where?: BusWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createRoute: (data: RouteCreateInput) => RoutePromise;
  updateRoute: (args: {
    data: RouteUpdateInput;
    where: RouteWhereUniqueInput;
  }) => RoutePromise;
  updateManyRoutes: (args: {
    data: RouteUpdateManyMutationInput;
    where?: RouteWhereInput;
  }) => BatchPayloadPromise;
  upsertRoute: (args: {
    where: RouteWhereUniqueInput;
    create: RouteCreateInput;
    update: RouteUpdateInput;
  }) => RoutePromise;
  deleteRoute: (where: RouteWhereUniqueInput) => RoutePromise;
  deleteManyRoutes: (where?: RouteWhereInput) => BatchPayloadPromise;
  createStop: (data: StopCreateInput) => StopPromise;
  updateStop: (args: {
    data: StopUpdateInput;
    where: StopWhereUniqueInput;
  }) => StopPromise;
  updateManyStops: (args: {
    data: StopUpdateManyMutationInput;
    where?: StopWhereInput;
  }) => BatchPayloadPromise;
  upsertStop: (args: {
    where: StopWhereUniqueInput;
    create: StopCreateInput;
    update: StopUpdateInput;
  }) => StopPromise;
  deleteStop: (where: StopWhereUniqueInput) => StopPromise;
  deleteManyStops: (where?: StopWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bus: (
    where?: BusSubscriptionWhereInput
  ) => BusSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  route: (
    where?: RouteSubscriptionWhereInput
  ) => RouteSubscriptionPayloadSubscription;
  stop: (
    where?: StopSubscriptionWhereInput
  ) => StopSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StopOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "time_ASC"
  | "time_DESC";

export type BusOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RouteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BusWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StopWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  eventList_every?: Maybe<EventWhereInput>;
  eventList_some?: Maybe<EventWhereInput>;
  eventList_none?: Maybe<EventWhereInput>;
  AND?: Maybe<StopWhereInput[] | StopWhereInput>;
  OR?: Maybe<StopWhereInput[] | StopWhereInput>;
  NOT?: Maybe<StopWhereInput[] | StopWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  stop?: Maybe<StopWhereInput>;
  bus?: Maybe<BusWhereInput>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface BusWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startTime?: Maybe<DateTimeInput>;
  startTime_not?: Maybe<DateTimeInput>;
  startTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startTime_lt?: Maybe<DateTimeInput>;
  startTime_lte?: Maybe<DateTimeInput>;
  startTime_gt?: Maybe<DateTimeInput>;
  startTime_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  route?: Maybe<RouteWhereInput>;
  eventList_every?: Maybe<EventWhereInput>;
  eventList_some?: Maybe<EventWhereInput>;
  eventList_none?: Maybe<EventWhereInput>;
  AND?: Maybe<BusWhereInput[] | BusWhereInput>;
  OR?: Maybe<BusWhereInput[] | BusWhereInput>;
  NOT?: Maybe<BusWhereInput[] | BusWhereInput>;
}

export interface RouteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  stopList_every?: Maybe<StopWhereInput>;
  stopList_some?: Maybe<StopWhereInput>;
  stopList_none?: Maybe<StopWhereInput>;
  AND?: Maybe<RouteWhereInput[] | RouteWhereInput>;
  OR?: Maybe<RouteWhereInput[] | RouteWhereInput>;
  NOT?: Maybe<RouteWhereInput[] | RouteWhereInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RouteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type StopWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BusCreateInput {
  id?: Maybe<ID_Input>;
  startTime: DateTimeInput;
  route: RouteCreateOneInput;
  eventList?: Maybe<EventCreateManyWithoutBusInput>;
}

export interface RouteCreateOneInput {
  create?: Maybe<RouteCreateInput>;
  connect?: Maybe<RouteWhereUniqueInput>;
}

export interface RouteCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  stopList?: Maybe<StopCreateManyInput>;
}

export interface StopCreateManyInput {
  create?: Maybe<StopCreateInput[] | StopCreateInput>;
  connect?: Maybe<StopWhereUniqueInput[] | StopWhereUniqueInput>;
}

export interface StopCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  eventList?: Maybe<EventCreateManyWithoutStopInput>;
}

export interface EventCreateManyWithoutStopInput {
  create?: Maybe<EventCreateWithoutStopInput[] | EventCreateWithoutStopInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutStopInput {
  id?: Maybe<ID_Input>;
  bus: BusCreateOneWithoutEventListInput;
  time: DateTimeInput;
}

export interface BusCreateOneWithoutEventListInput {
  create?: Maybe<BusCreateWithoutEventListInput>;
  connect?: Maybe<BusWhereUniqueInput>;
}

export interface BusCreateWithoutEventListInput {
  id?: Maybe<ID_Input>;
  startTime: DateTimeInput;
  route: RouteCreateOneInput;
}

export interface EventCreateManyWithoutBusInput {
  create?: Maybe<EventCreateWithoutBusInput[] | EventCreateWithoutBusInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutBusInput {
  id?: Maybe<ID_Input>;
  stop: StopCreateOneWithoutEventListInput;
  time: DateTimeInput;
}

export interface StopCreateOneWithoutEventListInput {
  create?: Maybe<StopCreateWithoutEventListInput>;
  connect?: Maybe<StopWhereUniqueInput>;
}

export interface StopCreateWithoutEventListInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface BusUpdateInput {
  startTime?: Maybe<DateTimeInput>;
  route?: Maybe<RouteUpdateOneRequiredInput>;
  eventList?: Maybe<EventUpdateManyWithoutBusInput>;
}

export interface RouteUpdateOneRequiredInput {
  create?: Maybe<RouteCreateInput>;
  update?: Maybe<RouteUpdateDataInput>;
  upsert?: Maybe<RouteUpsertNestedInput>;
  connect?: Maybe<RouteWhereUniqueInput>;
}

export interface RouteUpdateDataInput {
  name?: Maybe<String>;
  stopList?: Maybe<StopUpdateManyInput>;
}

export interface StopUpdateManyInput {
  create?: Maybe<StopCreateInput[] | StopCreateInput>;
  update?: Maybe<
    | StopUpdateWithWhereUniqueNestedInput[]
    | StopUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | StopUpsertWithWhereUniqueNestedInput[]
    | StopUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<StopWhereUniqueInput[] | StopWhereUniqueInput>;
  connect?: Maybe<StopWhereUniqueInput[] | StopWhereUniqueInput>;
  set?: Maybe<StopWhereUniqueInput[] | StopWhereUniqueInput>;
  disconnect?: Maybe<StopWhereUniqueInput[] | StopWhereUniqueInput>;
  deleteMany?: Maybe<StopScalarWhereInput[] | StopScalarWhereInput>;
  updateMany?: Maybe<
    StopUpdateManyWithWhereNestedInput[] | StopUpdateManyWithWhereNestedInput
  >;
}

export interface StopUpdateWithWhereUniqueNestedInput {
  where: StopWhereUniqueInput;
  data: StopUpdateDataInput;
}

export interface StopUpdateDataInput {
  name?: Maybe<String>;
  eventList?: Maybe<EventUpdateManyWithoutStopInput>;
}

export interface EventUpdateManyWithoutStopInput {
  create?: Maybe<EventCreateWithoutStopInput[] | EventCreateWithoutStopInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutStopInput[]
    | EventUpdateWithWhereUniqueWithoutStopInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutStopInput[]
    | EventUpsertWithWhereUniqueWithoutStopInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutStopInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutStopDataInput;
}

export interface EventUpdateWithoutStopDataInput {
  bus?: Maybe<BusUpdateOneRequiredWithoutEventListInput>;
  time?: Maybe<DateTimeInput>;
}

export interface BusUpdateOneRequiredWithoutEventListInput {
  create?: Maybe<BusCreateWithoutEventListInput>;
  update?: Maybe<BusUpdateWithoutEventListDataInput>;
  upsert?: Maybe<BusUpsertWithoutEventListInput>;
  connect?: Maybe<BusWhereUniqueInput>;
}

export interface BusUpdateWithoutEventListDataInput {
  startTime?: Maybe<DateTimeInput>;
  route?: Maybe<RouteUpdateOneRequiredInput>;
}

export interface BusUpsertWithoutEventListInput {
  update: BusUpdateWithoutEventListDataInput;
  create: BusCreateWithoutEventListInput;
}

export interface EventUpsertWithWhereUniqueWithoutStopInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutStopDataInput;
  create: EventCreateWithoutStopInput;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  time?: Maybe<DateTimeInput>;
  time_not?: Maybe<DateTimeInput>;
  time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  time_lt?: Maybe<DateTimeInput>;
  time_lte?: Maybe<DateTimeInput>;
  time_gt?: Maybe<DateTimeInput>;
  time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  time?: Maybe<DateTimeInput>;
}

export interface StopUpsertWithWhereUniqueNestedInput {
  where: StopWhereUniqueInput;
  update: StopUpdateDataInput;
  create: StopCreateInput;
}

export interface StopScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StopScalarWhereInput[] | StopScalarWhereInput>;
  OR?: Maybe<StopScalarWhereInput[] | StopScalarWhereInput>;
  NOT?: Maybe<StopScalarWhereInput[] | StopScalarWhereInput>;
}

export interface StopUpdateManyWithWhereNestedInput {
  where: StopScalarWhereInput;
  data: StopUpdateManyDataInput;
}

export interface StopUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface RouteUpsertNestedInput {
  update: RouteUpdateDataInput;
  create: RouteCreateInput;
}

export interface EventUpdateManyWithoutBusInput {
  create?: Maybe<EventCreateWithoutBusInput[] | EventCreateWithoutBusInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutBusInput[]
    | EventUpdateWithWhereUniqueWithoutBusInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutBusInput[]
    | EventUpsertWithWhereUniqueWithoutBusInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutBusInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutBusDataInput;
}

export interface EventUpdateWithoutBusDataInput {
  stop?: Maybe<StopUpdateOneRequiredWithoutEventListInput>;
  time?: Maybe<DateTimeInput>;
}

export interface StopUpdateOneRequiredWithoutEventListInput {
  create?: Maybe<StopCreateWithoutEventListInput>;
  update?: Maybe<StopUpdateWithoutEventListDataInput>;
  upsert?: Maybe<StopUpsertWithoutEventListInput>;
  connect?: Maybe<StopWhereUniqueInput>;
}

export interface StopUpdateWithoutEventListDataInput {
  name?: Maybe<String>;
}

export interface StopUpsertWithoutEventListInput {
  update: StopUpdateWithoutEventListDataInput;
  create: StopCreateWithoutEventListInput;
}

export interface EventUpsertWithWhereUniqueWithoutBusInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutBusDataInput;
  create: EventCreateWithoutBusInput;
}

export interface BusUpdateManyMutationInput {
  startTime?: Maybe<DateTimeInput>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  stop: StopCreateOneWithoutEventListInput;
  bus: BusCreateOneWithoutEventListInput;
  time: DateTimeInput;
}

export interface EventUpdateInput {
  stop?: Maybe<StopUpdateOneRequiredWithoutEventListInput>;
  bus?: Maybe<BusUpdateOneRequiredWithoutEventListInput>;
  time?: Maybe<DateTimeInput>;
}

export interface EventUpdateManyMutationInput {
  time?: Maybe<DateTimeInput>;
}

export interface RouteUpdateInput {
  name?: Maybe<String>;
  stopList?: Maybe<StopUpdateManyInput>;
}

export interface RouteUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface StopUpdateInput {
  name?: Maybe<String>;
  eventList?: Maybe<EventUpdateManyWithoutStopInput>;
}

export interface StopUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface BusSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BusWhereInput>;
  AND?: Maybe<BusSubscriptionWhereInput[] | BusSubscriptionWhereInput>;
  OR?: Maybe<BusSubscriptionWhereInput[] | BusSubscriptionWhereInput>;
  NOT?: Maybe<BusSubscriptionWhereInput[] | BusSubscriptionWhereInput>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface RouteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RouteWhereInput>;
  AND?: Maybe<RouteSubscriptionWhereInput[] | RouteSubscriptionWhereInput>;
  OR?: Maybe<RouteSubscriptionWhereInput[] | RouteSubscriptionWhereInput>;
  NOT?: Maybe<RouteSubscriptionWhereInput[] | RouteSubscriptionWhereInput>;
}

export interface StopSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StopWhereInput>;
  AND?: Maybe<StopSubscriptionWhereInput[] | StopSubscriptionWhereInput>;
  OR?: Maybe<StopSubscriptionWhereInput[] | StopSubscriptionWhereInput>;
  NOT?: Maybe<StopSubscriptionWhereInput[] | StopSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Bus {
  id: ID_Output;
  startTime: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BusPromise extends Promise<Bus>, Fragmentable {
  id: () => Promise<ID_Output>;
  startTime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  route: <T = RoutePromise>() => T;
  eventList: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BusSubscription
  extends Promise<AsyncIterator<Bus>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  route: <T = RouteSubscription>() => T;
  eventList: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BusNullablePromise extends Promise<Bus | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  startTime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  route: <T = RoutePromise>() => T;
  eventList: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Route {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoutePromise extends Promise<Route>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stopList: <T = FragmentableArray<Stop>>(args?: {
    where?: StopWhereInput;
    orderBy?: StopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RouteSubscription
  extends Promise<AsyncIterator<Route>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stopList: <T = Promise<AsyncIterator<StopSubscription>>>(args?: {
    where?: StopWhereInput;
    orderBy?: StopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RouteNullablePromise
  extends Promise<Route | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stopList: <T = FragmentableArray<Stop>>(args?: {
    where?: StopWhereInput;
    orderBy?: StopOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Stop {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StopPromise extends Promise<Stop>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  eventList: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface StopSubscription
  extends Promise<AsyncIterator<Stop>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  eventList: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface StopNullablePromise
  extends Promise<Stop | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  eventList: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Event {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  time: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stop: <T = StopPromise>() => T;
  bus: <T = BusPromise>() => T;
  time: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  stop: <T = StopSubscription>() => T;
  bus: <T = BusSubscription>() => T;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  stop: <T = StopPromise>() => T;
  bus: <T = BusPromise>() => T;
  time: () => Promise<DateTimeOutput>;
}

export interface BusConnection {
  pageInfo: PageInfo;
  edges: BusEdge[];
}

export interface BusConnectionPromise
  extends Promise<BusConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BusEdge>>() => T;
  aggregate: <T = AggregateBusPromise>() => T;
}

export interface BusConnectionSubscription
  extends Promise<AsyncIterator<BusConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BusEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBusSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BusEdge {
  node: Bus;
  cursor: String;
}

export interface BusEdgePromise extends Promise<BusEdge>, Fragmentable {
  node: <T = BusPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BusEdgeSubscription
  extends Promise<AsyncIterator<BusEdge>>,
    Fragmentable {
  node: <T = BusSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBus {
  count: Int;
}

export interface AggregateBusPromise
  extends Promise<AggregateBus>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBusSubscription
  extends Promise<AsyncIterator<AggregateBus>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RouteConnection {
  pageInfo: PageInfo;
  edges: RouteEdge[];
}

export interface RouteConnectionPromise
  extends Promise<RouteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RouteEdge>>() => T;
  aggregate: <T = AggregateRoutePromise>() => T;
}

export interface RouteConnectionSubscription
  extends Promise<AsyncIterator<RouteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RouteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRouteSubscription>() => T;
}

export interface RouteEdge {
  node: Route;
  cursor: String;
}

export interface RouteEdgePromise extends Promise<RouteEdge>, Fragmentable {
  node: <T = RoutePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RouteEdgeSubscription
  extends Promise<AsyncIterator<RouteEdge>>,
    Fragmentable {
  node: <T = RouteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoute {
  count: Int;
}

export interface AggregateRoutePromise
  extends Promise<AggregateRoute>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRouteSubscription
  extends Promise<AsyncIterator<AggregateRoute>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StopConnection {
  pageInfo: PageInfo;
  edges: StopEdge[];
}

export interface StopConnectionPromise
  extends Promise<StopConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StopEdge>>() => T;
  aggregate: <T = AggregateStopPromise>() => T;
}

export interface StopConnectionSubscription
  extends Promise<AsyncIterator<StopConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StopEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStopSubscription>() => T;
}

export interface StopEdge {
  node: Stop;
  cursor: String;
}

export interface StopEdgePromise extends Promise<StopEdge>, Fragmentable {
  node: <T = StopPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StopEdgeSubscription
  extends Promise<AsyncIterator<StopEdge>>,
    Fragmentable {
  node: <T = StopSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStop {
  count: Int;
}

export interface AggregateStopPromise
  extends Promise<AggregateStop>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStopSubscription
  extends Promise<AsyncIterator<AggregateStop>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BusSubscriptionPayload {
  mutation: MutationType;
  node: Bus;
  updatedFields: String[];
  previousValues: BusPreviousValues;
}

export interface BusSubscriptionPayloadPromise
  extends Promise<BusSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BusPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BusPreviousValuesPromise>() => T;
}

export interface BusSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BusSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BusSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BusPreviousValuesSubscription>() => T;
}

export interface BusPreviousValues {
  id: ID_Output;
  startTime: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BusPreviousValuesPromise
  extends Promise<BusPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startTime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BusPreviousValuesSubscription
  extends Promise<AsyncIterator<BusPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  time: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  time: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RouteSubscriptionPayload {
  mutation: MutationType;
  node: Route;
  updatedFields: String[];
  previousValues: RoutePreviousValues;
}

export interface RouteSubscriptionPayloadPromise
  extends Promise<RouteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoutePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoutePreviousValuesPromise>() => T;
}

export interface RouteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RouteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RouteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoutePreviousValuesSubscription>() => T;
}

export interface RoutePreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoutePreviousValuesPromise
  extends Promise<RoutePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoutePreviousValuesSubscription
  extends Promise<AsyncIterator<RoutePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StopSubscriptionPayload {
  mutation: MutationType;
  node: Stop;
  updatedFields: String[];
  previousValues: StopPreviousValues;
}

export interface StopSubscriptionPayloadPromise
  extends Promise<StopSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StopPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StopPreviousValuesPromise>() => T;
}

export interface StopSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StopSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StopSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StopPreviousValuesSubscription>() => T;
}

export interface StopPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StopPreviousValuesPromise
  extends Promise<StopPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StopPreviousValuesSubscription
  extends Promise<AsyncIterator<StopPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Stop",
    embedded: false
  },
  {
    name: "Route",
    embedded: false
  },
  {
    name: "Bus",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
